/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/v1/register/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user
     * @description Add a new user and returns jwt
     */
    post: operations["authenticateWithGoogle"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/v1/register/apple": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Register a new user
     * @description Add a new user and returns jwt
     */
    post: operations["authenticateWithApple"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getUserStatus
     * @description returns user status
     */
    get: operations["getUserStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/user-details": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getUserDetails
     * @description returns user details
     */
    get: operations["getUserDetails"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/user-info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getUserInfo
     * @description returns user info
     */
    get: operations["getUserInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/social-details": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * update social details
     * @description returns user details
     */
    put: operations["updateSocialDetails"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/payment-details": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * update payment details
     * @description updates payment details
     */
    put: operations["updatePaymentDetails"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/instagram-aesthetics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * update instagram aesthetics
     * @description update instagram aesthetics
     */
    put: operations["updateInstagramAesthetics"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/referral/validate-coupon": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * update instagram aesthetics
     * @description update instagram aesthetics
     */
    post: operations["validateReferralCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/v1/ob-offer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * getUserOffers
     * @description returns user info
     */
    get: operations["getObOffer"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/user/{userId}/token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get token for userId
     * @description returns token
     */
    get: operations["getToken"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/user/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get user details for userId
     * @description returns user details
     */
    get: operations["getUserDetailsFromUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/user/{id}/update-status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * update user status
     * @description updates user status
     */
    put: operations["updateUserStatus"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get users details with filters
     * @description returns user details with filters
     */
    get: operations["getUsersWithFilters"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/inventory": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all inventory */
    get: operations["getAllInventoryDetails"];
    put?: never;
    /**
     * create inventory
     * @description create inventory for brand
     */
    post: operations["createInventory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/inventory/{inventoryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get inventory details
     * @description returns inventory details
     */
    get: operations["getInventoryDetails"];
    /**
     * update inventory
     * @description update inventory for brand
     */
    put: operations["updateInventory"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/inventory/brand/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get brand inventories
     * @description returns all inventories
     */
    get: operations["getAllInventoryFromBrandId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/coupon-codes/inventory/{inventoryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get all coupon codes for brand
     * @description returns coupon codes for brand
     */
    get: operations["getCouponCodes"];
    put?: never;
    /**
     * upload coupon code
     * @description upload coupon codes for brandId
     */
    post: operations["uploadCouponCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/brands-category": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all categories */
    get: operations["getAllCategories"];
    put?: never;
    /**
     * create brand category
     * @description create brand category
     */
    post: operations["createCategory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/brands-category/{categoryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get category details
     * @description returns category details
     */
    get: operations["getCategoryDetails"];
    /**
     * update category
     * @description update category for brand
     */
    put: operations["updateCategory"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/brands": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all brands */
    get: operations["getAllBrands"];
    put?: never;
    /**
     * create brand
     * @description create brand
     */
    post: operations["createBrand"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/brands/category": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all brands with categoryId */
    get: operations["getAllBrandsWithCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/brand/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get brand details
     * @description returns brand details
     */
    get: operations["getBrandDetails"];
    /**
     * update brand
     * @description update brand
     */
    put: operations["updateBrand"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/v1/summary/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get brand reach summary
     * @description returns brand summary
     */
    get: operations["getBrandReachSummary"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/category/v1/active-categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all active categories */
    get: operations["getAllActiveCategories"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/v1/active/category": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get brands by categoryId */
    get: operations["getEligibleBrandsForUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/v1/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get brands by categoryId */
    get: operations["getAllBrandsForUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/v1/details/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get brands by brandId */
    get: operations["getBrandDetailsForUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/v2/details/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get brands by brandId */
    get: operations["getBrandDetailsForUserV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transaction/v1/discount/initiate-transaction": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * initiate discount transaction
     * @description initiates discount transaction
     */
    post: operations["initiateDiscountTransaction"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/transaction/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get user transactions */
    get: operations["getTransactionById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transaction/v1/pending": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get pending transaction */
    get: operations["getPendingTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/user/transactions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get user transactions */
    get: operations["getUserTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transaction/v1/brand/{brandId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get user transactions */
    get: operations["getAllApprovedBrandTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/transaction/{id}/status-update": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * updates transaction status
     * @description update transaction status
     */
    put: operations["updateTransactionStatus"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/home/v1": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get homepage details for user */
    get: operations["getHomepageDetailsForUser"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shopify/v1/stores": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get all shopify stores */
    get: operations["getAllShopifyStores"];
    put?: never;
    /**
     * create new store
     * @description create store session
     */
    post: operations["createShopifyStore"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shopify/v1/session/{sessionId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get shopify session */
    get: operations["getShopifySession"];
    /**
     * updates store session
     * @description update store session
     */
    put: operations["updateShopifyStoreSession"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/offers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get all offers
     * @description get all offers
     */
    get: operations["getAllOffers"];
    put?: never;
    /**
     * create new offer
     * @description creates a new offer
     */
    post: operations["createOffer"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/v1/offer/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * get offer details
     * @description get offer details
     */
    get: operations["getOfferDetails"];
    /**
     * update offer details
     * @description updates offer
     */
    put: operations["updateOffer"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    GoogleRegistrationRequest: {
      authCode: string;
    };
    AppleRegistrationRequest: {
      idToken: string;
      name?: string;
    };
    Token: {
      token?: string;
    };
    UserStatus: {
      status?: components["schemas"]["UserEligibilityStatus"];
      underWritingCategory?: components["schemas"]["UnderWritingCategory"];
      /** Format: int64 */
      phoneNumber?: number;
      instagramHandle?: string;
      reason?: string;
    };
    UserDetails: {
      id?: string;
      userId?: string;
      email?: string;
      name?: string;
      reason?: string;
      /** Format: int64 */
      phoneNumber?: number;
      provider?: components["schemas"]["Provider"];
      instagramHandle?: string;
      underWritingCategory?: components["schemas"]["UnderWritingCategory"];
      eligibilityStatus?: components["schemas"]["UserEligibilityStatus"];
      referralInfo?: components["schemas"]["UserReferralCouponInfo"];
      engagementNumber?: number;
      userMeta?: components["schemas"]["UserMeta"];
      upiId?: string;
      externalId?: string;
      roles?: components["schemas"]["Role"][];
      reachSummary?: components["schemas"]["ReachSummary"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UserReferralCouponInfo: {
      isCouponApplied?: boolean;
      offerId?: string;
      referralCodeApplied?: string;
    };
    ReachSummary: {
      totalPosts?: number;
      totalReach?: number;
      totalCashback?: number;
      totalOrderValue?: number;
    };
    UserSocialRequest: {
      /** Format: int64 */
      phoneNumber: number;
      instagramHandle: string;
    };
    InventoryDetails: {
      id?: string;
      brandId?: string;
      totalUnits?: number;
      availableUnits?: number;
      category?: components["schemas"]["UnderWritingCategory"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    InventoryRequest: {
      brandId?: string;
      category?: components["schemas"]["UnderWritingCategory"];
    };
    CouponCodeRequest: {
      usageType?: components["schemas"]["UsageType"];
      /** Format: date-time */
      validFrom?: string;
      /** Format: date-time */
      validTo?: string;
      code?: string;
      availableUnits?: number;
    };
    CouponCode: {
      id?: string;
      code?: string;
      usageType?: components["schemas"]["UsageType"];
      isAvailable?: boolean;
      /** Format: date-time */
      validFrom?: string;
      /** Format: date-time */
      validTo?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    DiscountTransactionRequest: {
      brandId: string;
    };
    InitiatePostTransactionRequest: {
      billLink?: string;
      postLink?: string;
      brandId?: string;
      transactionId?: string;
    };
    CategoryRequest: {
      name?: string;
      description?: string;
      status?: components["schemas"]["Status"];
      rank?: number;
      createdBy?: string;
      updatedBy?: string;
    };
    CategoryDetails: {
      id?: string;
      name?: string;
      description?: string;
      status?: components["schemas"]["Status"];
      rank?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      createdBy?: string;
      updatedBy?: string;
      version?: number;
    };
    BrandRequest: {
      name: string;
      description?: string;
      primaryImage: string;
      instagramHandle?: string;
      instagramImageOne?: string;
      instagramImageSecond?: string;
      logo?: string;
      website?: string;
      categoryId: string;
      underWritingCategories: components["schemas"]["UnderWritingCategory"][];
      brandType: components["schemas"]["BrandType"];
      status: components["schemas"]["Status"];
      rank?: number;
      meta: components["schemas"]["BrandMeta"];
      createdBy?: string;
      updatedBy?: string;
    };
    BrandMeta: {
      cashbackMeta?: components["schemas"]["BrandCashbackMeta"];
      discountMeta?: components["schemas"]["BrandDiscountMeta"];
    };
    BrandDiscountMeta: {
      superLowCategoryMeta?: components["schemas"]["BrandCategoryMeta"];
      lowCategoryMeta?: components["schemas"]["BrandCategoryMeta"];
      lowMidCategoryMeta?: components["schemas"]["BrandCategoryMeta"];
      midCategoryMeta?: components["schemas"]["BrandCategoryMeta"];
      highCategoryMeta?: components["schemas"]["BrandCategoryMeta"];
    };
    BrandCashbackMeta: {
      superLowCategoryMeta?: components["schemas"]["CashbackCategoryMeta"];
      lowCategoryMeta?: components["schemas"]["CashbackCategoryMeta"];
      lowMidCategoryMeta?: components["schemas"]["CashbackCategoryMeta"];
      midCategoryMeta?: components["schemas"]["CashbackCategoryMeta"];
      highCategoryMeta?: components["schemas"]["CashbackCategoryMeta"];
    };
    BrandCategoryMeta: {
      discountPercentage?: number;
      maxDiscount?: number;
    };
    CategoryDiscountDetails: {
      discountPercentage?: number;
      offerDiscountPercentage?: number;
      maxDiscount?: number;
    };
    CashbackCategoryMeta: {
      postCashbackBrandMeta?: components["schemas"]["BrandCategoryMeta"];
      reelCashbackBrandMeta?: components["schemas"]["BrandCategoryMeta"];
      storyCashbackBrandMeta?: components["schemas"]["BrandCategoryMeta"];
    };
    BrandDetails: {
      id?: string;
      name?: string;
      description?: string;
      instagramHandle?: string;
      logo?: string;
      website?: string;
      instagramImageOne?: string;
      instagramImageSecond?: string;
      rank?: number;
      categoryId?: string;
      primaryImage?: string;
      underWritingCategories?: components["schemas"]["UnderWritingCategory"][];
      brandType?: components["schemas"]["BrandType"];
      status?: components["schemas"]["Status"];
      meta?: components["schemas"]["BrandMeta"];
      reachSummary?: components["schemas"]["ReachSummary"];
      shopifySession?: components["schemas"]["ShopifyStoreSession"];
      deactivateReason?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      createdBy?: string;
      updatedBy?: string;
    };
    PaginatedBrands: {
      brands?: components["schemas"]["BrandDetails"][];
      pageInfo?: components["schemas"]["Pagination"];
    };
    PaginatedUserBrands: {
      brands?: components["schemas"]["UserBrandDetailsMetaV2"][];
      pageInfo?: components["schemas"]["Pagination"];
    };
    BrandCategoryDetails: {
      id?: string;
      name?: string;
      description?: string;
    };
    TransactionRequest: {
      reach?: number;
      totalCashbackGiven?: number;
      orderValue?: number;
      status: components["schemas"]["TransactionStatus"];
      reason?: string;
      updatedBy?: string;
    };
    PaginatedTransactionDetails: {
      transactions?: components["schemas"]["TransactionDetails"][];
      pageInfo?: components["schemas"]["Pagination"];
    };
    PaginatedTransactionSummary: {
      transactions?: components["schemas"]["TransactionSummary"][];
      pageInfo?: components["schemas"]["Pagination"];
    };
    TransactionSummary: {
      /** Format: date-time */
      time?: string;
      postLink?: string;
      totalCashbackGiven?: number;
      orderValue?: number;
      reach?: number;
    };
    TransactionDetails: {
      id?: string;
      transactionId?: string;
      userId?: string;
      offerId?: string;
      brandId?: string;
      instagramLink?: string;
      reviewLink?: string;
      inventoryId?: string;
      billLink?: string;
      postLink?: string;
      reach?: number;
      totalCashbackGiven?: number;
      orderValue?: number;
      status?: components["schemas"]["TransactionStatus"];
      reason?: string;
      transactionType?: components["schemas"]["TransactionType"];
      /** Format: date-time */
      initiatedAt?: string;
      /** Format: date-time */
      pendingAt?: string;
      /** Format: date-time */
      approvedAt?: string;
      /** Format: date-time */
      rejectedAt?: string;
      updatedBy?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      version?: number;
    };
    Pagination: {
      pageSize?: number;
      pageNumber?: number;
      count?: number;
    };
    UserPaymentDetailsRequest: {
      upiId: string;
    };
    UserBrandDetailsResponse: {
      lastTransactionRef?: components["schemas"]["LastTransactionRef"];
      couponCodeRef?: components["schemas"]["CouponCodeRef"];
      brandDetailsMeta?: components["schemas"]["UserBrandDetailsMeta"];
    };
    UserBrandDetailsResponseV2: {
      lastTransactionRef?: components["schemas"]["LastTransactionRef"];
      couponCodeRef?: components["schemas"]["CouponCodeRef"];
      brandDetailsMeta?: components["schemas"]["UserBrandDetailsMetaV2"];
    };
    UserBrandDetailsMetaV2: {
      brandId?: string;
      primaryImage?: string;
      instagramHandle?: string;
      logo?: string;
      website?: string;
      instagramImageOne?: string;
      offerDescription?: string;
      instagramImageSecond?: string;
      brandType?: components["schemas"]["BrandType"];
      name?: string;
      description?: string;
      discountPercentage?: number;
      offerDiscountPercentage?: number;
      offerType?: components["schemas"]["OfferType"];
      maxDiscount?: number;
      offerMaxDiscount?: number;
      reelDiscountMeta?: components["schemas"]["CategoryDiscountDetails"];
      postDiscountMeta?: components["schemas"]["CategoryDiscountDetails"];
      storyDiscountMeta?: components["schemas"]["CategoryDiscountDetails"];
      category?: components["schemas"]["BrandCategoryDetails"];
      shopifyHandles?: any;
    };
    UserBrandDetailsMeta: {
      primaryImage?: string;
      instagramHandle?: string;
      logo?: string;
      website?: string;
      brandType?: components["schemas"]["BrandType"];
      name?: string;
      description?: string;
      discountPercentage?: number;
      maxDiscount?: number;
      reelDiscountMeta?: components["schemas"]["BrandCategoryMeta"];
      postDiscountMeta?: components["schemas"]["BrandCategoryMeta"];
      storyDiscountMeta?: components["schemas"]["BrandCategoryMeta"];
    };
    LastTransactionRef: {
      id?: string;
      transactionId?: string;
      reason?: string;
      status?: components["schemas"]["TransactionStatus"];
    };
    CouponCodeRef: {
      couponCode?: string;
      /** Format: date-time */
      validFrom?: string;
      /** Format: date-time */
      validTo?: string;
    };
    PendingTransactionDetails: {
      transactions?: components["schemas"]["TransactionDetails"][];
    };
    HomepageResponse: {
      totalEarnings?: number;
      underWritingCategory?: components["schemas"]["UnderWritingCategory"];
      sections?: components["schemas"]["Section"][];
      notificationBanner?: components["schemas"]["NotificationBanner"];
    };
    NotificationBanner: {
      image?: string;
      color?: string;
      text?: string;
      link?: string;
    };
    Section: {
      isBlocked?: boolean;
      title?: string;
      cards?: components["schemas"]["Card"][];
    };
    Card: {
      template?: components["schemas"]["CardTemplate"];
      text?: string;
      subtext?: string;
      ctaText?: string;
      sideImage?: string;
      backgroundColor?: string;
      link?: string;
      image?: string;
      imageTag?: string;
    };
    UserInfo: {
      userId?: string;
      email?: string;
      name?: string;
      upiId?: string;
      /** Format: int64 */
      phoneNumber?: number;
      instagramHandle?: string;
      instagramMeta?: components["schemas"]["InstagramMeta"];
      engagementNumber?: number;
      reachSummary?: components["schemas"]["ReachSummary"];
      userMeta?: components["schemas"]["UserMeta"];
      eligibilityStatus?: components["schemas"]["UserEligibilityStatus"];
      referralInfo?: components["schemas"]["UserReferralCouponInfo"];
      tokenExpired?: boolean;
    };
    InstagramMeta: {
      updateStatus?: string;
      tokenExpired?: boolean;
    };
    ShopifyStoreSession: {
      id?: string;
      shop?: string;
      isOnline?: boolean;
      isExpired?: boolean;
      /** Format: date-time */
      expires?: string;
      accessToken?: string;
      scope?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ShopifyBrandDetails: {
      brandId?: string;
      session?: components["schemas"]["ShopifyStoreSession"];
    };
    ShopifySessionRequest: {
      id?: string;
      shop?: string;
      accessToken?: string;
      isOnline?: boolean;
      /** Format: date-time */
      expires?: string;
      scope?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    OfferDetails: {
      id?: string;
      title?: string;
      description?: string;
      offerLevel?: components["schemas"]["OfferLevel"];
      homepageMeta?: components["schemas"]["OfferHomepageMeta"];
      brandId?: string;
      state?: components["schemas"]["OfferState"];
      rule?: components["schemas"]["Rule"];
      code?: string;
      rank?: number;
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      dynamicEndDate?: components["schemas"]["DynamicEndDate"];
      offerType?: components["schemas"]["OfferType"];
      discountPercentage?: number;
      maxDiscount?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      createdBy?: string;
      updatedBy?: string;
    };
    OfferRequest: {
      offerLevel: components["schemas"]["OfferLevel"];
      offerType: components["schemas"]["OfferType"];
      code?: string;
      title: string;
      description: string;
      discountPercentage: number;
      maxDiscount?: number;
      rank?: number;
      brandId?: string;
      state?: components["schemas"]["OfferState"];
      rule?: components["schemas"]["Rule"];
      homepageMeta?: components["schemas"]["OfferHomepageMeta"];
      /** Format: date-time */
      startDate?: string;
      /** Format: date-time */
      endDate?: string;
      dynamicEndDate?: components["schemas"]["DynamicEndDate"];
      createdBy?: string;
      updatedBy?: string;
    };
    OfferHomepageMeta: {
      color?: string;
      link?: string;
      image?: string;
      text?: string;
    };
    BucketRange: {
      lowerBound: number;
      upperBound: number;
    };
    DynamicEndDate: {
      feature?: components["schemas"]["DynamicFeature"];
      value?: number;
    };
    Rule: {
      postSubmission?: number;
      underWritingCategory?: components["schemas"]["UnderWritingCategory"][];
      offerLimit?: number;
      engagementBucketRange?: components["schemas"]["BucketRange"];
      checkReferralCode?: boolean;
    };
    UserMeta: {
      shoppingFrequency?: string;
      instagramAesthetic?: string[];
    };
    UserReferralCouponRequest: {
      referralCode: string;
    };
    UserReferralCouponCheckResponse: {
      isEligible?: boolean;
      message?: string;
      offerDetails?: components["schemas"]["UserOfferDetails"];
    };
    UserOfferDetails: {
      code?: string;
      title?: string;
      description?: string;
    };
    InstagramAestheticRequest: {
      shoppingFrequency?: string;
      instagramAesthetic?: string[];
    };
    Exception: {
      errorCode?: number;
      message?: string;
      /** Format: date-time */
      timestamp?: string;
    };
    /** @enum {string} */
    UserEligibilityStatus: "IN_PROGRESS" | "ELIGIBLE" | "NOT_ELIGIBLE";
    /** @enum {string} */
    UnderWritingCategory: "SUPER_LOW" | "LOW" | "LOW_MID" | "MID" | "HIGH";
    /** @enum {string} */
    DynamicFeature: "ONBOARDING_TIME";
    /** @enum {string} */
    OfferState: "ACTIVE" | "INACTIVE";
    /** @enum {string} */
    OfferType: "ADD_ON" | "FIXED";
    /** @enum {string} */
    Provider: "GOOGLE" | "APPLE";
    /** @enum {string} */
    Role: "ROLE_USER";
    /** @enum {string} */
    OfferLevel: "BRAND" | "USER";
    /** @enum {string} */
    UsageType: "SINGLE_USE" | "MULTI_USE";
    /** @enum {string} */
    TransactionStatus:
      | "INITIATED"
      | "PENDING"
      | "DEAD"
      | "REJECTED"
      | "APPROVED";
    /** @enum {string} */
    BrandType: "CASHBACK" | "DISCOUNT";
    /** @enum {string} */
    TransactionType: "CASHBACK" | "DISCOUNT";
    /** @enum {string} */
    Status: "ACTIVE" | "INACTIVE" | "SHOPIFY_INIT";
    /** @enum {string} */
    CardTemplate:
      | "FullWidthCard"
      | "StretchedFullWidthCard"
      | "LargeSquareCard"
      | "SquareCard"
      | "FullImageCard"
      | "LargeSquareCardWithText";
  };
  responses: never;
  parameters: {
    /** @description App version */
    optionalAppVersion: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  authenticateWithGoogle: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new user using google oauth */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GoogleRegistrationRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  authenticateWithApple: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new user using apple oauth */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AppleRegistrationRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  getUserStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserStatus"];
        };
      };
    };
  };
  getUserDetails: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  getUserInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfo"];
        };
      };
    };
  };
  updateSocialDetails: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new user using google oauth */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSocialRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  updatePaymentDetails: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Updates payment details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPaymentDetailsRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  updateInstagramAesthetics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Updates instagram aesthetic details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstagramAestheticRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  validateReferralCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Updates instagram aesthetic details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserReferralCouponRequest"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserReferralCouponCheckResponse"];
        };
      };
    };
  };
  getObOffer: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserOfferDetails"];
        };
      };
    };
  };
  getToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  getUserDetailsFromUserId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetails"];
        };
      };
    };
  };
  updateUserStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description User status request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserStatus"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getUsersWithFilters: {
    parameters: {
      query?: {
        userId?: string;
        phoneNumber?: number;
        status?: components["schemas"]["UserEligibilityStatus"];
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserDetails"][];
        };
      };
    };
  };
  getAllInventoryDetails: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InventoryDetails"][];
        };
      };
    };
  };
  createInventory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new inventory */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InventoryRequest"];
      };
    };
    responses: {
      /** @description Successful created inventory */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getInventoryDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inventoryId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns inventory details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InventoryDetails"];
        };
      };
    };
  };
  updateInventory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inventoryId: string;
      };
      cookie?: never;
    };
    /** @description Updates inventory */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InventoryRequest"];
      };
    };
    responses: {
      /** @description Successful updated inventory */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getAllInventoryFromBrandId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns inventory details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InventoryDetails"][];
        };
      };
    };
  };
  getCouponCodes: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inventoryId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns inventory details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CouponCode"][];
        };
      };
    };
  };
  uploadCouponCode: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inventoryId: string;
      };
      cookie?: never;
    };
    /** @description Uploads coupon code for brand */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCodeRequest"][];
      };
    };
    responses: {
      /** @description Successfully uploaded coupon codes for brand */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getAllCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryDetails"][];
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new category */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description Successful created category */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getCategoryDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns category details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryDetails"];
        };
      };
    };
  };
  updateCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        categoryId: string;
      };
      cookie?: never;
    };
    /** @description Updates category */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description Successful updated category */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getAllBrands: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandDetails"][];
        };
      };
    };
  };
  createBrand: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Creates a new brand */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrandRequest"];
      };
    };
    responses: {
      /** @description Successful created brand */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getAllBrandsWithCategory: {
    parameters: {
      query?: {
        categoryId?: string;
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedBrands"];
        };
      };
    };
  };
  getBrandDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns brand details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandDetails"];
        };
      };
    };
  };
  updateBrand: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    /** @description Updates brand */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrandRequest"];
      };
    };
    responses: {
      /** @description Successful updated brand */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getBrandReachSummary: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description returns brand summary */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReachSummary"];
        };
      };
    };
  };
  getAllActiveCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryDetails"][];
        };
      };
    };
  };
  getEligibleBrandsForUser: {
    parameters: {
      query?: {
        categoryId?: string;
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedBrands"];
        };
      };
    };
  };
  getAllBrandsForUser: {
    parameters: {
      query?: {
        categoryId?: string;
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedUserBrands"];
        };
      };
    };
  };
  getBrandDetailsForUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserBrandDetailsResponse"];
        };
      };
    };
  };
  getBrandDetailsForUserV2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserBrandDetailsResponseV2"];
        };
      };
    };
  };
  initiateDiscountTransaction: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Details required to initiate transaction */
    requestBody: {
      content: {
        "application/json": components["schemas"]["DiscountTransactionRequest"];
      };
    };
    responses: {
      /** @description Successfully initiated transaction */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getTransactionById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TransactionDetails"];
        };
      };
    };
  };
  getPendingTransactions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PendingTransactionDetails"];
        };
      };
    };
  };
  getUserTransactions: {
    parameters: {
      query?: {
        userId?: string;
        transactionId?: string;
        status?: components["schemas"]["TransactionStatus"];
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedTransactionDetails"];
        };
      };
    };
  };
  getAllApprovedBrandTransactions: {
    parameters: {
      query?: {
        pageSize?: number;
        pageNumber?: number;
      };
      header?: never;
      path: {
        brandId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedTransactionSummary"];
        };
      };
    };
  };
  updateTransactionStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Updates transaction status */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionRequest"];
      };
    };
    responses: {
      /** @description Successful updated transaction status */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getHomepageDetailsForUser: {
    parameters: {
      query?: never;
      header?: {
        /** @description App version */
        "X-App-Version"?: components["parameters"]["optionalAppVersion"];
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HomepageResponse"];
        };
      };
    };
  };
  getAllShopifyStores: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShopifyBrandDetails"][];
        };
      };
    };
  };
  createShopifyStore: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Details req to upDetails req to create shopify store */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShopifySessionRequest"];
      };
    };
    responses: {
      /** @description Successful created shopify session */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getShopifySession: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShopifyBrandDetails"];
        };
      };
    };
  };
  updateShopifyStoreSession: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sessionId: string;
      };
      cookie?: never;
    };
    /** @description Details req to update shopify store session */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShopifySessionRequest"];
      };
    };
    responses: {
      /** @description Successful updated shopify session */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getAllOffers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns all offers */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OfferDetails"][];
        };
      };
    };
  };
  createOffer: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Details req to create a new offer */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OfferRequest"];
      };
    };
    responses: {
      /** @description Successful create new offer */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  getOfferDetails: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description get offer details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OfferDetails"];
        };
      };
    };
  };
  updateOffer: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Details req to update an offer */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OfferRequest"];
      };
    };
    responses: {
      /** @description Successful create new offer */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
}
